file structure

/src
-/app
--/api
---/auth
----/[...nextauth]
-----route.js
--/posts
---/[id]
----page.js
--globals.css
--layout.js
--page.js
-/atom
--modalAtom.js
-/components
--Comment.jsx
--CommentModal.jsx
--Comments.jsx
--Feed.jsx
--Icons.jsx
--News.jsx
--Post.jsx
--SessionProvider.jsx
--Sidebar.jsx
-firebase.js
-next.config.js


route.js
import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";

console.log("GOOGLE_CLIENT_ID:", process.env.GOOGLE_CLIENT_ID);

const handler = NextAuth({
    providers: [
        GoogleProvider({
            clientId: process.env.GOOGLE_CLIENT_ID,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        }),
    ],

    // to get the username
    callbacks: {
        async session({session,token}){
            // console.log("Token is :", token); // Log the token to inspect its properties
            session.user.username = session.user.name.split(" ").join('').toLocaleLowerCase();
            session.user.uid = token.sub;
            return session;
        }
    }
});

export {handler as GET, handler as POST};




page.js
import { app } from '@/firebase';
import { doc, getDoc, getFirestore } from 'firebase/firestore';
import React from 'react'
import { HiArrowLeft } from 'react-icons/hi';
import Link from 'next/link';
import Post from '@/components/Post';
import Comments from '@/components/Comments';

// we fetch data from the parameters
export default async function page({params}) {
  const db = getFirestore(app)
  let data = {};
  // remember that it is just one document we are getting
  const querySnapshot = await getDoc(doc(db, 'posts', params.id));
  // we get data from db to our state
  data = {...querySnapshot.data(), id: querySnapshot.id};

  return (
    <div className='max-w-xl mx-auto border-r border-l min-h-screen'>
      {/* whenever you use sticky, you have to define the oriantation of it */}
      <div className='flex items-center space-x-2 py-2 px-3 sticky top-0 z-50 bg-white border-b border-gray-200'>
        <Link href={'/'} className='hover:bg-gray-100 rounded-full p-2'>
          <HiArrowLeft className='h-5 w-5' />
        </Link>
        <h2 className='sm:text-lg'>Back</h2>
      </div>
      {/* we use the post component already created and we pass the data */}
      <Post post={data} id={data.id} />
      {/* with this id, we get post and we can therfore get the comments */}
      <Comments id={params.id} />
    </div>
  )
}





globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;





layout.js
import { Inter } from "next/font/google";
import "./globals.css";
import Sidebar from "@/components/Sidebar";
import News from "@/components/News";
import SessionWrapper from "@/components/SessionProvider";
import CommentModal from "@/components/CommentModal";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <SessionWrapper>
    <html lang="en">
      <body className={inter.className}>
        
        <div className='flex justify-between max-w-6xl mx-auto'>
          <div className='hidden sm:inline border-r h-screen sticky top-0'>
            <Sidebar/>
          </div>

        <div className='flex-1'>
        {children}
        </div>

        <div className="lg:flex-col p-3 h-screen border-l hidden lg:flex w-[24rem]">
          <div className='sticky top-0 bg-white py-2'>
          <input type='text' placeholder="search" className='bg-gray-100 border border-gray-200 rounded-3xl text-sm w-full px-4 py-2' />
          </div>
          <News />
        </div>
        </div>
        <CommentModal />
        </body>
    </html>
    </SessionWrapper>
  );
}





page.js
import Feed from '@/components/Feed'
import Input from '@/components/Input'
import React from 'react'

export default function page() {
  return (
    <div className='max-w-xl mx-auto border-r border-l min-h-screen'>
      <div className='py-2 px-3 sticky top-0 z-50 bg-white border-b border-gray-200'>
        <h2 className='text-lg sm:text-xl font-bold'>Home</h2>
      </div>
      <Input />
      <Feed />
    </div>
  )
}





modalAtom.js
import { atom } from "recoil";

export const modalState = atom({
    key: 'modalState',
    default: false,
});

// to pass id
export const postIdState = atom({
    key: 'postIdState',
    default: '',
})




Comment.jsx
// for each comment
"use client"
import { app } from '@/firebase';
import { collection, deleteDoc, doc, getFirestore, onSnapshot, serverTimestamp, setDoc } from 'firebase/firestore';
import React, { useEffect, useState } from 'react'
import { HiDotsHorizontal, HiHeart, HiOutlineHeart } from 'react-icons/hi'
import { signIn, useSession } from 'next-auth/react';

export default function Comment({comment, commentId, originalPostId}) {
    const [isLiked, setIsLiked] = useState(false);
    const[likes, setLikes] = useState([]);
    const db = getFirestore(app);
    const {data:session} = useSession();

    useEffect(() => {
        // here we are saying we go to the comments of the post and wich comments are we going to the ones that have likes
        onSnapshot(collection(db, 'posts' , originalPostId, 'comments', commentId , 'likes'), (snapshot) => {
            // all the likes
            setLikes(snapshot.docs)
        });
    }, [db]);

    useEffect(() => {
        // check each like and check if its equal to our id
        setIsLiked(likes.findIndex((like) => like.id === session?.user?.uid) !== -1);
    }, [likes]);
    
    const likePost = async () => {
        if(session){
            if(isLiked){
                // here after we go to comments, we create a new collection called likes
                await deleteDoc(doc(db, 'posts', originalPostId, 'comments', commentId , 'likes' , session?.user.uid))
            } else {
                // likes is the name of the new collection and we add the user id
                await setDoc(doc(db, 'posts' , originalPostId, 'comments', commentId , 'likes' , session.user.uid), {
                    username: session.user.username,
                    timestamp: serverTimestamp(),
                });
                
            }
        } else {
            // go to sign in
            signIn();
        }
    };

  return (
    <div className='flex p-3 border-b border-gray-200 hover:bg-gray-50 pl-10'>
      {/* This ? is optional chaining operator. It checks 
      if post is not null or undefined before trying to access profileImg */}
      <img src={comment?.userImg} alt='user-img' className='h-9 w-9 rounded-full mr-4' />
      <div className='flex-1'>
        <div className='flex items-center justify-between'>
        <div className='flex items-center space-x-1 whitespace-nowrap'>
          <h4 className='font-bold text-sm truncate'>{comment?.name}</h4>
          <span className='text-xs truncate'>@{comment?.username}</span>
        </div>
        <HiDotsHorizontal className='text-sm' />
        </div>
        <p className='text-gray-800 text-xs my-3'>{comment?.comment}</p>
        
        <div className='flex items-center'>
        {isLiked ? (
                    <HiHeart onClick={likePost} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 text-red-600 hover:text-red-500 hover:bg-red-100' />

        ) : (
            <HiOutlineHeart onClick={likePost} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 hover:text-red-500 hover:bg-red-100' />

        )}
        {likes.length > 0 && <span className={`text-xs ${isLiked && "text-red-600"}`}>{likes.length}</span>}
        </div>


      </div>
    </div>
  )
}





CommentModal.jsx
"use client"

import { useRecoilState } from "recoil"
import { modalState, postIdState } from "@/atom/modalAtom"
import Modal from "react-modal";
import {HiX} from 'react-icons/hi'
import { useEffect, useState } from "react";
import { addDoc, collection, doc, getFirestore, onSnapshot, serverTimestamp } from "firebase/firestore";
import { app } from "@/firebase";
import { useRouter } from "next/navigation";
const {useSession} = require('next-auth/react');


export default function CommentModal() {
    const [open, setOpen] = useRecoilState(modalState);
    const [postId, setPostId] = useRecoilState(postIdState);
    const [post, setPost] = useState({});
    const {data: session} = useSession();
    const db = getFirestore(app);
    const [input, setInput] = useState('');
    const router = useRouter();

    useEffect(() => {
        if(postId !== '') {
            // we want data from the firestore. this data is what will come to this modal
            const postRef = doc(db, 'posts', postId);
            const unsubscribe = onSnapshot(
                postRef,
                (snapshot) => {
                    if(snapshot.exists()){
                        setPost(snapshot.data());
                    }else {
                        console.log('No such document!');
                    }
                }
            );
            return () => unsubscribe();
        }
    }, [postId]); // here we say, anytime the post id changes, we want to fetch the data
    // with this we are getting data of a post

    const sendComment = async() => {
        addDoc(collection(db, 'posts' , postId, 'comments'), {
            name: session.user.name,
            username: session.user.username,
            userImg: session.user.image,
            comment: input,
            timestamp: serverTimestamp(),
        }).then(() => {
            setInput('');
            setOpen(false);
            router.push(`/posts/${postId}`);
        }).catch((error) => {
            console.log('we got some error', error);
        })
    }

    return (
        <div>
            {open && (
                <Modal 
                isOpen={open}
                onRequestClose={() => setOpen(false)}
                ariaHideApp={false}
                className='max-w-lg w-[90%] absolute top-24 left-[10%] translate-x-[50%] bg-white border-2 border-gray-200 rounded-xl shadow-md'
                >
                    <div className="p-4">
                        <div className="border-b border-gray-200 py-2 px-1.5">
                            <HiX className="text-2xl text-gray-700 p-1 hover:bg-gray-200 rounded-full cursor-pointer" onClick={() => setOpen(false)} />
                        </div>
                        <div className="p-2 flex items-center space-x-1 relative">
                            {/* the z index is responsible for bringing it behind the images  */}
                            <span className="w-0.5 h-full z-[-1] absolute left-8 top-11 bg-gray-300"/>

                            <img src={post?.profileImg} alt="user-img" className="h-11 w-11 rounded-full mr-4"/>
                            <h4 className="font-bold sm:text-[16px] text-[16px] hover:underline truncate">{post?.name}</h4>
                            <span className="text-sm sm:text-[15px] truncate">@{post?.username}</span>
                        </div>
                        <p className="text-gray-500 text-[15px] sm:text-[16px] ml-16 mb-2">{post?.text}</p>
                        {/* now to comment */}
                        <div className='flex p-3 space-x-3'>
                            <img src={session.user.image} alt="user-image" className="h-11 w-11 rounded-full cursor-pointer hover:brightness-95" />
                            <div className='w-full divide-y  divide-gray-200'>
                            <div>
                                <textarea className="w-full border-none outline-none tracking-wide min-h-[50px] text-gray-700" placeholder="Comment about this" rows='2' value={input} onChange={(e) => setInput(e.target.value)}></textarea>
                            </div>
                            <div className="flex items-center justify-end pt-2.5">
                                <button className='bg-blue-400 text-white px-4 py-1.5 rounded-full font-bold shadow-md hover:brightness-95 disabled:opacity-50' disabled={input.trim() === ''} onClick={sendComment}>
                                    Reply</button>
                            </div>

                            </div>
                        </div>
                    </div>
                </Modal>
            )}
        </div>
    )
}





Comments.jsx
"use client";

import { app } from '@/firebase';
import { collection, getFirestore, onSnapshot, orderBy, query } from 'firebase/firestore';
import React, { useEffect, useState } from 'react'
import Comment from './Comment';

export default function Comments({id}) {
    const db = getFirestore(app);
    const [comments, setComments] = useState([]);

    useEffect(() => {
        onSnapshot(query(collection(db, 'posts', id, 'comments'), orderBy('timestamp', 'desc')), 
    (snapshot) => {
        setComments(snapshot.docs)
    })
    }, [db,id])
  return (
    <div>
        {
            comments.map((comment) => (
                <Comment key={comment.id} comment={comment.data()} commentId={comment.id} originalPostId={id} />
            ))
        }
    </div>
  )
}





Feed.jsx
import React from "react";
import {collection, getDocs, getFirestore, orderBy, query, } from 'firebase/firestore';
import { app } from '../firebase';
import Post from "./Post";

export default async function Feed() {
    const db = getFirestore(app);
    // I made a typo in my database of timestamp
    const q = query(collection(db, 'posts'), orderBy('timestap', 'asc'));
    const querySnapshot = await getDocs(q);
    let data = [];
    querySnapshot.forEach((doc) => {
        data.push({id:doc.id, ...doc.data()});
    });
    console.log(data);
    return (
        <div>
        {
            data.map((post) => (
                <Post key={post.id} post={post} id={post.id} />
            ))
        }
        </div>
    )
}






Icons.jsx
'use client';

import React, { useEffect, useState } from 'react'
import {HiOutlineChat, HiOutlineHeart, HiOutlineTrash, HiHeart} from 'react-icons/hi'
import { signIn, useSession } from 'next-auth/react'
import { collection, deleteDoc, doc, getFirestore, onSnapshot, serverTimestamp, setDoc } from 'firebase/firestore';
import { app } from '../firebase'
import { useRecoilState } from 'recoil';
import { modalState , postIdState } from '@/atom/modalAtom';



export default function Icons({id, uid}) {
    // ensure that the person is authenticated
    const {data: session} = useSession();

    const [isLiked, setIsLiked] = useState(false);
    const [likes, setLikes] = useState([]);
    const [open, setOpen] = useRecoilState(modalState);
    const [postId, setPostId] = useRecoilState(postIdState)
    const [comments, setComments] = useState([]);

    // we initialize the database
    const db = getFirestore(app);

    const likePost = async () => {
        if(session){
            // console.log('session:', session);
            // console.log('id:', session.user.uid);
            if(isLiked){
                await deleteDoc(doc(db, 'posts', id, 'likes', session?.user.uid))
            } else {
                // likes is the name of the new collection and we add the user id
                await setDoc(doc(db, 'posts' , id, "likes", session.user.uid), {
                    username: session.user.username,
                    timestamp: serverTimestamp(),
                });
                
            }
        } else {
            // go to sign in
            signIn();
        }
    };
    // when someone has already liked, we want the post to unlike
    useEffect(() => {
        onSnapshot(collection(db, 'posts' , id, 'likes'), (snapshot) => {
            // all the likes
            setLikes(snapshot.docs)
        });
    }, [db]);

    useEffect(() => {
        // check each like and check if its equal to our id
        setIsLiked(likes.findIndex((like) => like.id === session?.user?.uid) !== -1);
    }, [likes]);

    const deletePost = async() => {
        if(window.confirm('Are you sure you want to delete this post?')) {
            if(session?.user?.uid === uid)
            {
                deleteDoc(doc(db, 'posts', id)).then(() => {
                    console.log("Successfully deleted");
                    // we want to see a new page
                    window.location.reload();
                }).catch((error) => {
                    console.log("Error removing documents: " , error)}
                );
            } else {
                alert("You are not authorized to delete this post");
            }
        }
    }

    // to show comments count
useEffect(() => {
    const unsubscribe = onSnapshot(collection(db, 'posts', id, 'comments'), (snapshot) => {
        setComments(snapshot.docs)
    })
    return () => unsubscribe()
}, [db,id]) // we do the function when db or id changes
  return (
    <div className='flex justify-start gap-5 p-2 text-gray-500'>
        <div className='flex items-center'>

        <HiOutlineChat onClick={() => {
            if(!session) {
                signIn()
            } else {
                setOpen(!open)
                setPostId(id);
            }
        }} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 hover:text-sky-500 hover:bg-sky-100' />
        {
            comments.length > 0 && (
                <span className='text-xs'>{comments.length}</span>
            )
        }
        </div>
        <div className='flex items-center'>
        {isLiked ? (
                    <HiHeart onClick={likePost} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 text-red-600 hover:text-red-500 hover:bg-red-100' />

        ) : (
            <HiOutlineHeart onClick={likePost} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 hover:text-red-500 hover:bg-red-100' />

        )}
        {likes.length > 0 && <span className={`text-xs ${isLiked && "text-red-600"}`}>{likes.length}</span>}
        </div>

        {session?.user?.uid === uid && (
            <HiOutlineTrash onClick={deletePost} className='h-8 w-8 cursor-pointer rounded-full transition duration-500 ease-in-out p-2 hover:text-red-500 hover:bg-red-100' />
        )}
    </div>
  )
}





Input.jsx
"use client"
import React, { useEffect, useRef, useState } from 'react'
import { useSession } from 'next-auth/react'
import { HiOutlinePhotograph } from 'react-icons/hi';
import { app } from '@/firebase';
import {getStorage, ref, uploadBytesResumable, getDownloadURL} from 'firebase/storage'
import {addDoc, collection, getFirestore, serverTimestamp} from 'firebase/firestore'

export default function Input() {
    const {data: session} = useSession();
    const imagePicRef = useRef(null);
    const [imageFileUrl, setImageFileUrl] = useState(null);
    const [selectedFile, setSelectedFile] = useState(null);
    const [imageFileUpload, setImageFileUpload] = useState(false);
    // why two. because an image will come as a file that we will need to convert to a url
    const [text, setText] = useState('');
    const [postLoading, setPostLoading] = useState(false);
    const db = getFirestore(app);

    const addImaageToPost = (e) => {
        const file = e.target.files[0];
        if(file) {
            setSelectedFile(file);
            setImageFileUrl(URL.createObjectURL(file));
            // console.log(file);
            // console.log(imageFileUrl);
        }
    }

    useEffect(() => {
        if(selectedFile) {
            uploadImageToStorage();
        }
    }, [selectedFile]);

    const uploadImageToStorage = () => {
        setImageFileUpload(true);
        const storage = getStorage(app);
        const fileName = new Date().getTime() + '-' + selectedFile.name;
        const storageRef = ref(storage, fileName);
        const uploadTask = uploadBytesResumable(storageRef, selectedFile);
        uploadTask.on(
            'state_changed',
            (snapshot) => {
                const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                console.log('upload is ' + progress + '% done');
            },
            (error) => {
                console.log(error);
                setImageFileUpload(false);
                setImageFileUrl(false);
                setSelectedFile(false);
            },
            () => {
                getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
                    setImageFileUrl(downloadURL);
                    setImageFileUpload(false);
                });
            }

        );
    };

    // const generateUniqueId = () => {
    //     return 'uid-' + Math.random().toString(36).substr(2, 9) + '-' + Date.now();
    // };

    const handleSubmit = async() => {
        setPostLoading(true);
        // const uniqueUid = generateUniqueId();
        // const uid = session?.user?.uid || uniqueUid;
        const docRef = await addDoc(collection(db, 'posts'), {
            uid: session.user.uid,
            // i dont know why this gives me an error
            name: session.user.name,
            username: session.user.username,
            // text: text,
            text,
            profileImg: session.user.image,
            timestap: serverTimestamp(),
            image: imageFileUrl,
        });
        setPostLoading(false);
        setText('');
        setImageFileUrl(null);
        setSelectedFile(null);
        // whenever server posts to client, it caches the data and will need a page refresh
        location.reload();
    }

    if(!session) return null;
  return (
    <div className='flex border-b border-gray-200 p-3 space-x-3 w-full'>
        <img src={session.user.image} alt='user img' className='h-11 w-11 rounded-full cursor-pointer hover:brightness-95' />
        <div className='w-full divide-y divide-gray-200'>
            {/* tracking is space between letters. divide like adds a horizontal rule hr */}
            <textarea rows='2' placeholder='whats happening' className='w-full border-none outline-none tracking-wide min-h-[50px] text-gray-700' value={text} onChange={(e) => setText(e.target.value)}></textarea>
            {
                selectedFile && (
                    // the image pulse like makes it blink as it is uploading. fantastic. simple wonderful
                    <img src={imageFileUrl} alt='image' className={`w-full max-h-[250px] object-cover cursor-pointer ${imageFileUpload} ? 'animate-pulse' : '' `}/>
                )
            }
            <div className='flex items-center justify-between pt-2.5'>
                <HiOutlinePhotograph onClick={() => imagePicRef.current.click()}  className='h-10 w-10 p-2 text-sky-500 hover:bg-sky-100 rounded-full cursor-pointer'/>
                <input type='file' hidden  onChange={addImaageToPost} ref={imagePicRef} accept='image/*'/>
                {/* we say disable the button when the text is empty. but first of all we trim it then the other conditions. so we cannot post if it is empty */}
                <button className='bg-blue-400 text-white px-4 py-1.5 rounded-full font-bold shadow-md hover:brightness-95 disabled:opacity-50' disabled={text.trim() === '' || postLoading || imageFileUpload} onClick={handleSubmit}>Post</button>
            </div>

        </div>
    </div>
  )
}





News.jsx
"use client"
import React, { useEffect, useState } from 'react'

export default function News() {
    const [news, setNews] = useState([]);
    const [articleNumber, setArticleNumber] = useState(3);

    useEffect(() => {
        fetch('https://saurav.tech/NewsAPI/top-headlines/category/business/us.json').then((res) => res.json()).then((data) => {
            setNews(data.articles);
        });
    }, [])
  return (
    <div className='text-gray-700 space-y-1 bg-gray-100 rounded-xl pt-2'>
        <h4 className='font-bold text-xl px-4'>Whats happening</h4>
        {news.slice(0, articleNumber).map((article) => (
            <div className='' key={article.url}>
                <a href={article.url} target='_blank'>
                <div className='flex items-center justify-between px-4 py-2 space-x-1'>
                    <div>
                        <h6 className='text-sm font-bold'>{article.title}</h6>
                        <p className='text-xs font-medium text-gray-500'>{article.source.name}</p>
                        </div>
                        <img src={article.urlToImage} alt={article.title} width={70} className='rounded-xl' />
                    </div>
                    </a>
            </div>
    ))}
    <button onClick={() => setArticleNumber(articleNumber + 3)} className='w-full py-2 bg-gray-200 hover:bg-gray-300 transition duration-200'>
        Load More
    </button>


    </div>
  )
}





Post.jsx
import Link from 'next/link'
import React from 'react'
import { HiDotsHorizontal } from 'react-icons/hi'
import Icons from './Icons'

export default function Post({post, id}) {
  return (
    <div className='flex p-3 border-b border-gray-200 hover:bg-gray-50'>
      {/* This ? is optional chaining operator. It checks 
      if post is not null or undefined before trying to access profileImg */}
      <img src={post?.profileImg} alt='user-img' className='h-11 w-11 rounded-full mr-4' />
      <div className='flex-1'>
        <div className='flex items-center justify-between'>
        <div className='flex items-center space-x-1 whitespace-nowrap'>
          <h4 className='font-bold text-sm truncate'>{post?.name}</h4>
          <span className='text-xs truncate'>@{post?.username}</span>
        </div>
        <HiDotsHorizontal className='text-sm' />
        </div>
        <Link href={`/posts/${id}`}> 
        <p className='text-gray-800 text-sm my-3'>{post?.text}</p>
        </Link>
        <Link href={`/posts/${id}`} >
          <img src={post?.image} className='rounded-2xl mr-2' />
        </Link>
        {/* in order to say like we need to have id of the post */}
        <Icons id={id} uid={post.uid} />
      </div>
    </div>
  )
}





SessionProvider.jsx
"use client"
import React from 'react'
import {SessionProvider} from 'next-auth/react'
import { RecoilRoot } from 'recoil'

const SessionWrapper = ({children}) => {
  return (
    // this makes it operate as server side
    <SessionProvider>
      <RecoilRoot>
      {children}
      </RecoilRoot>
    </SessionProvider>
  )
}


export default SessionWrapper;




Sidebar.jsx
"use client"
// we cannot keep this component as server side because we are having interactivity with it
import { signIn, signOut, useSession } from 'next-auth/react';
import Link from 'next/link';
import React from 'react'
import { FaXTwitter } from "react-icons/fa6";
import { GoHomeFill } from "react-icons/go";
import { HiDotsHorizontal } from "react-icons/hi"


export default function Sidebar() {
    const {data: session} = useSession(); // to get the session
  return (
    // when we justify between the two divs the lower one the latter one will go waay below
    <div className='flex flex-col p-3 justify-between h-screen'>
        <div className='flex flex-col gap-4 p-3'>
        <Link href='/'>
            <FaXTwitter className='w-16 h-16 cursor-pointer p-3 hover:bg-gray-100 rounded-full transtion-all duration-200'/>
            
        </Link>

        <Link href='/' className='flex items-center p- hover:bg-gray-100 rounded-full trasition-all duration-200 gap-2 w-fit'>
        <GoHomeFill className='w-16 h-16'/>
        <span className='font-bold hidden xl:inline'>Home</span>
        </Link>
        {session ? (
            <button onClick={() => signOut()} className='bg-blue-400 text-white rounded-full px-2 mt-4 hover:brightness-90 shadow-md transition-all duration-200 w-48 h-9 hidden xl:inline font-semibold'>
            Sign out
        </button>
        ) : (
            <button onClick={() => signIn()} className='bg-blue-400 text-white rounded-full px-2 mt-4 hover:brightness-90 shadow-md transition-all duration-200 w-48 h-9 hidden xl:inline font-semibold'>
            Sign in
        </button>
        )}
        
        
    </div>

    {
        session && 
        (
            <div className='text-gray-700 text-sm flex items-center cursor-pointer p-3 hover:bg-gray-100 rounded-full transition-all duration-200'>
                <img src={session.user.image} alt='user-img' className='h-10 w-10 rounded-full xl:mr-2' />
                <div className='hidden xl:inline'>
                    <h4 className='font-bold'>{session.user.name}</h4>
                    <p className='text-gray-500'>@{session.user.username}</p>
                </div>
                <HiDotsHorizontal className='h-5 xl:ml-8 hidden xl:inline' />
            </div>
        )
    }

    </div>
  )
}





firebase.js
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: "next-x-ce2de.firebaseapp.com",
  projectId: "next-x-ce2de",
  storageBucket: "next-x-ce2de.appspot.com",
  messagingSenderId: "202287652986",
  appId: "1:202287652986:web:93eb1e560f3db8acd3dbc3",
  measurementId: "G-25YEQPQ5M1"
};

// Initialize Firebase
export const app = initializeApp(firebaseConfig);
// const analytics = getAnalytics(app);




next.config.js
require('dotenv').config();

module.exports = {
  env: {
    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
    NEXTAUTH_URL: process.env.NEXTAUTH_URL,
  },
};